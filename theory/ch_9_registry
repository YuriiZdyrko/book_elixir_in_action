Process Registry allows complex names (any Erlang term).
Registry links to all registered processes, 
and unregisters if process go down.

Registry is a process:

1. Start Registry process:
Registry.start_link(name: :my_registry, keys: :unique)

Keys - :unique or :duplicate (for pub/sub).

2. Register processes:
Registry.register(:my_registry, {:database_worker, 1}, nil)
OR (for singleton process)
GenServer.start_link(__MODULE__, nil, name: {:via, registry_module, some_arg})

In case of Registry, some_arg = {registry_name_atom, process_key_term}

Registry maps self() to {:database_worker, 1}

3. Lookup processes:
[{db_worker_pid, _value}] =
    Registry.lookup(
    :my_registry,
    {:database_worker, 1}
)



If you are using :via in start_link, ALWAYS USE :via in GenServer call/cast.

** (CaseClauseError) no case clause matching: {:error, {:function_clause, [{GenServer, :whereis, [1], [file: 'lib/gen_server.ex', line: 1195]}, {GenServer, :call, 3, [file: 'lib/gen_server.ex', line: 1011]}, {Todo.Server, :init, 1, [file: 'lib/server.ex', line: 23]}, {:gen_server, :init_it, 2, [file: 'gen_server.erl', line: 374]}, {:gen_server, :init_it, 6, [file: 'gen_server.erl', line: 342]}, {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 249]}]}}
    (todo 0.1.0) lib/cache.ex:16: Todo.Cache.server_process/1
    (todo 0.1.0) lib/test.ex:11: Todo.Test.list_existing/0

In this case inside init has been error. So start_link failed!
start_link calls init
start_link calls init
start_link calls init
start_link calls init
start_link calls init
