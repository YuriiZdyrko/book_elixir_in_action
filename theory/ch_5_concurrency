High availability = 
    Fault-tolerance
    Scalability
    Distribution

send expression -> Puts message in PID mailbox
receive expression -> Pulls message from a mailbox.

Basically send, and receive just write/read mailbox


Server process - runs indefinitely, has state.
Interface functions - public, executed in caller process.
Implementation functions - private, executed in server process. 

Functional programming - always keep value in a variable
Concurrent programming - always keep pid in a variable

A server process does:
¡ Spawn a separate process
¡ Run an infinite loop in the process
¡ Maintain the process state
¡ React to messages
¡ Send a response back to the caller