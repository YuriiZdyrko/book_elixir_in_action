1.
High availability = 
    Fault-tolerance
    Scalability
    Distribution

2.
send expression -> Puts message in PID mailbox
receive expression -> Pulls message from a mailbox.

Basically send, and receive just write/read mailbox

3.
Server process - runs indefinitely, has state.
Interface functions - public, executed in caller process.
Implementation functions - private, executed in server process. 

4.
Functional programming - always keep value in a variable
Concurrent programming - always keep pid in a variable

5.
A server process does:
¡ Spawn a separate process
¡ Run an infinite loop in the process
¡ Maintain the process state
¡ React to messages
¡ Send a response back to the caller

6.
List all (including macro-generated) functions
MyModule.__info__(:functions)

[child_spec: 1, code_change: 3, handle_call: 3, handle_cast: 2,
handle_info: 2, init: 1, terminate: 2]

7.
@impl GenServer
def handle_call

Using @impl allows compile-time checking of arguments. 
Use @impl if behaviour is used!

8. Regarding additional init work

def init(params) do
    Sends itself a message
    send(self(), :real_init)
    {:ok, nil}
end

This technique will generally work as long as your process isn’t registered under a
local name. If the process isn’t registered, someone has to know its pid to send it a mes-
sage, and that pid will only be known after init/1 has finished. Hence, you can be sure
that the message you send to yourself is the first one being handled.

But if process needs to be registered, there's workaround:

def init(params) do
    ...
    send(self(), :real_init)
    register(self(), :some_name)
end

9. Reasons for running code in a dedicated process
- The code must manage a long-living state.
- The code handles a kind of a resource that can and should be reused, such as a TCP
connection, database connection, file handle, pipe to an OS process, and so on.
- A critical section of the code must be synchronized. Only one process may run
this code in any moment.

10. Pooling - a remedy for unbounded concurrency.
For example - prevent too many simultaneous database requests.
Ecto internally relies on a Poolboy!